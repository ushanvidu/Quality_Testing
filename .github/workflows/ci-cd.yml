name: CI/CD Pipeline with Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Unit Tests (TDD)
        run: mvn test -Dtest=UserServiceTest
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: password

      - name: Run API Tests
        run: mvn test -Dtest=*ApiTest
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: password

      - name: Run BDD Tests (Cucumber)
        run: mvn test -Dtest=RunCucumberTest
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: password

      - name: Run Security Tests (OWASP)
        run: mvn test -Dtest=SecurityTest
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: password

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/cucumber-reports/

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: target/cucumber-reports/

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'user-management-app'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 8
            --scan **/*.java
            --scan **/pom.xml
          # This will fail the build if critical vulnerabilities found

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: dependency-check-report.html

      - name: Run SpotBugs Security Analysis
        run: |
          mvn compile spotbugs:spotbugs
          mvn spotbugs:check
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

      - name: Upload SpotBugs Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: spotbugs-reports
          path: target/spotbugs.xml

  sonarqube:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Run SonarCloud Analysis
        run: mvn sonar:sonar -Dsonar.projectKey=your-project-key -Dsonar.organization=your-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: [test, security-scan, sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Application
        run: mvn clean package -DskipTests

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "your-heroku-app-name"
          heroku_email: "your-email@example.com"
          usedocker: false

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Start Application
        run: |
          mvn spring-boot:run &
          echo $! > app.pid
          sleep 30
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

      - name: Run JMeter Performance Test
        run: |
          # Download JMeter
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.3.tgz
          tar -xzf apache-jmeter-5.4.3.tgz
          
          # Run basic performance test
          apache-jmeter-5.4.3/bin/jmeter -n -t src/test/jmeter/UserManagementTest.jmx -l performance-results.jtl
          
          # Generate summary
          echo "=== PERFORMANCE TEST RESULTS ==="
          echo "Check performance-results.jtl for details"
          
          # Stop application
          kill $(cat app.pid)

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results.jtl